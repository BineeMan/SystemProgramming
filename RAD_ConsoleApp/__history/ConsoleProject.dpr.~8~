program ConsoleProject;

{$APPTYPE CONSOLE}

{$R *.res}

uses
 Classes, Character, ComObj, ActiveX, Variants, Windows, Messages, SysUtils;
function AddDelphi(val1: integer; val2: integer): integer; stdcall;

begin

Result := val1 + val2;

end;


//PWideChar - LPCWSTR
//WideString - BSTR

function isNumber(str: string): boolean; stdcall
var
  i: Integer;
  val: Integer;
  ch: Char;
begin
  for ch in str do begin
    if ( NOT(TCharacter.IsNumber(ch)) AND ( ord(ch) <> ord('.') ) ) then begin
      Result := False;
      Exit;
    end;
  end;

  Result := True;
end;

function ReadTextFileDelphi(const FileName: PWideChar; out Text: WideString; out Count: Integer): HResult; stdcall;
  var TextFile: TStringList;
  var content: TStringList;
  i, j: Integer;
  var Line: TStringList;
  var val: Double;
  var str: String;
  var NumsAmount: Integer;
           begin
            try
                TextFile := TStringList.Create;
                TextFile.create;
                TextFile.LoadFromFile(FileName);

                content := TStringList.Create;
                content.create;

                Line := TStringList.Create;
                Line.Delimiter := #9;

                Count := 0;
                for i := 0 to TextFile.Count-1 do begin
                  Line.DelimitedText := TextFile.Strings[i];
                  NumsAmount := 0;
                    for j := 0 to Line.Count-1 do begin
                      if ( isNumber(Line[j]) ) then begin
                        NumsAmount := NumsAmount + 1;
                      end
                      else begin
                        NumsAmount := 0;
                        Break;
                      end;
                  end;
                  if (NumsAmount >= 2) then begin
                    Count := Count + 1;
                    content.Append(TextFile.Strings[i]);
                  end;
                end;

                Text := content.Text;
                TextFile.Free;
                content.Free;
                Result := 1;
            except
              on E: Exception do Result := -1
            end;
           end;

var
  filePath: PWideChar;
  Text: WideString;
  Count: Integer;
  //MyExcel: OleVariant;
  //const ExcelApp = 'Excel.Application';


function ConvertTableToExcel(FileName: PWideChar) : HResult; stdcall;
var
  TableBuffer: Variant;
  i, j: integer;
  MyExcel: OleVariant;
  Text: WideString;
  textStr: string;
  num: string;
  Count: Integer;
  arr: array of array of real;
  Row : Integer;
  Col : Integer;
begin
  try
    begin

          //CoInitialize(Nil);
          //MyExcel:=CreateOleObject('Excel.Application');
          //MyExcel.Workbooks.Add;
          ReadTextFileDelphi(FileName, Text, Count);
          textStr := Text;
          Row := 5;
          Col := 5;
          SetLength(arr, Row, Col);
          num := '';
          j := 0;
         {
          for i := 0 to Length(textStr) do begin
              if textStr[i] = '\n' then begin
                arr[i, j] := StrToFloat(num);
                j := j + 1;
                num := '';
              end
              else begin
                if textStr[i] = '\t' then begin
                  arr[i, j] := StrToFloat(num);
                  num := '';
                end
                else begin
                   num := textStr[i];
                end;
              end;
          end;
          }
          for i := 0 to Row-1 do begin
            for j := 0 to Col-1 do begin
              arr[i, j] := 1.2;
              write(arr[i, j]);
              write(' ')
            end;
            writeln('');
          end;
           arr := NIL;
          //MyExcel.Cells[1 ,i + 1] := textStr[i];
          //MyExcel.Application.EnableEvents:=false;
          //MyExcel.Visible:=true;
          Result:=1;
    end
  except
    on E: Exception do Result := -1
  end;
end;

begin
  filePath := 'E:\SystemProgramming\Files\test.tsv';
  Text := '';
  //ReadTextFileDelphi(filePath, Text, Count);
  //writeln(Text);
  //WriteSmthToExcel('test');
  ConvertTableToExcel(filePath);
  Readln;
end.
